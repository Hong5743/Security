1) SecurityContextHolder, SecurityContext, Authentication
세가지 클래스는 스프링 시큐리티의 주요 컴포넌트로, 각 컴포넌트의 관계를 간단히 표현하자면 다음과 같다.

유저의 아이디와 패스워드 사용자 정보를 넣고 실제 가입된 사용자인지 체크한 후 인증에 성공하면 
우리는 사용자의 principal과 credential정보를 Authentication안에 담는다. 스프링 시큐리티에서 방금 담은 Authentication을 SecurityContext에 보관한다. 
이 SecurityContext를 SecurityContextHolder에 담아 보관하게 되는 것이다.

Authentication 클래스는 현재 접근하는 주체의 정보와 권한을 담는 인터페이스고 SecurityContext 저장되며 SecurityContextHolder를 통해 SecurityContext에 접근하고, 
SecurityContext를 통해 Authentication에 접근할 수 있다.

public interface Authentication extends Principal, Serializable {
	Collection<? extends GrantedAuthority> getAuthorities();
	Object getCredentials();
	Object getDetails();
	Object getPrincipal();
	boolean isAuthenticated();
	void setAuthenticated(boolean isAuthenticated) throws IllegalArgumentException;
}

우리가 로그인한 사용자의 정보를 얻기 위해서는
SecurityContextHolder.getContext().getAuthentication().getPrincipal();
이 구문을 사용하여 가져왔었는데 왜 이렇게 가져올 수 있는지 잘 모르는 분들이 많을 것이다.
하지만 위의 코드를 보면서 이제 이런식으로 동작하는구나 하고 이해할 수 있을 것이다.
